
/* Styling card components */
.card{
  border: 1px solid rgb(146, 145, 145);
  border-radius: 10px;
  box-shadow: 5px 5px 5px hsla(0, 0%, 0%, 0.1); /* 1st value: horizontal offset, 2nd value: vertical offset, 3rd value: blur radius */
  padding: 20px; /* space between elements and border */
  margin : 10px; /* space outside the border */
  text-align: center;
  max-width: 250px;
  display: inline-block; /* in case we have more cards they will atleast flow within our container because normally divs are block level elements */
}

.card .card-img{
  max-width: 60%;
  height: auto;
  border-radius: 50%;
  margin-bottom: 10px;
}
.card .card-title{
  font-family: Arial, sans-serif;
  margin: 0;
  color: hsl(0, 0%, 20%);

}
.card .card-text{
  font-family: Arial, sans-serif;
  color: hsl(0, 0%, 30%);
}

/* css styling for button */

/* External css stylesheet : Great for global styles

style.css or index.css file. It is the general term for any stylesheet file linked externally. Easy to use for simple projects . But can lead to naming conflicts. 

*/

/*
.button{ 
  background-color: hsl(200, 100%, 50%);
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
  border: none;
  cursor: pointer;
}
  */

/* 
  Modules : Dedicated css stylesheet specifically for each component. Preferred for individual components that have their own unique styles.
  
  css file created for a specific purpose or page not a shared or general one. It is still external but dedicated to a certain task. 
  
  eg: homepage.css for homepage only. styles are applied creating modules. Avoid naming conflicts. Because a unique class is going to be generated 
  for you via hashing algorithm. [check by inspecting the button]. 
  
  modules are convenient if each component has its own unique style. But in modules global styles are not applied easily. 
  You would have to import them from elsewhere ( create a global css file in index.js or app.js. then import it and use it).
*/

/*
  inline css : Good for small components with minimal styling. convenient and easy to understand. It prevents global style conflicts as we are not working with class names. But less 
  maintainable in large applications.
*/

/* styling student  */
.student{
  font-family: Arial, sans-serif;
  font-size: 1em;
  padding: 10px;
  border: 1px solid hsla(0, 0%, 50%, 0.8);
}
.student p{
  margin: 0;
}